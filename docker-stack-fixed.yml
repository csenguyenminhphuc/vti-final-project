version: '3.8'

services:
  # PostgreSQL Database Service
  database:
    image: csenguyenminhphuc/student-management-system-db:latest
    environment:
      - POSTGRES_DB=students_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=SecurePassword123!
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d students_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Flask Web Application Service with 2 replicas
  webapp:
    image: csenguyenminhphuc/student-management-system-app:latest
    environment:
      - DB_HOST=database
      - DB_NAME=students_db
      - DB_USER=postgres
      - DB_PASSWORD=SecurePassword123!
      - DB_PORT=5432
      - SECRET_KEY=your-super-secure-secret-key-change-in-production-2024
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin123
      - FLASK_ENV=production
    networks:
      - app-network
    deploy:
      replicas: 2
      placement:
        max_replicas_per_node: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    depends_on:
      - database
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Load Balancer Service  
  nginx:
    image: csenguyenminhphuc/student-management-system-nginx:v2
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    depends_on:
      - webapp

  # Visualizer (optional - for monitoring the swarm)
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: overlay
    attachable: true